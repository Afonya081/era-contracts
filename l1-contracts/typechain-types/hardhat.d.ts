/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Ownable2Step",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable2Step__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IL1Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1Bridge__factory>;
    getContractFactory(
      name: "IL1BridgeLegacy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1BridgeLegacy__factory>;
    getContractFactory(
      name: "IL2Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2Bridge__factory>;
    getContractFactory(
      name: "IL2ERC20Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2ERC20Bridge__factory>;
    getContractFactory(
      name: "IL2WethBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2WethBridge__factory>;
    getContractFactory(
      name: "IWETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH9__factory>;
    getContractFactory(
      name: "L1ERC20Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1ERC20Bridge__factory>;
    getContractFactory(
      name: "L1WethBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1WethBridge__factory>;
    getContractFactory(
      name: "AllowList",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AllowList__factory>;
    getContractFactory(
      name: "IAllowList",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAllowList__factory>;
    getContractFactory(
      name: "IL2ContractDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2ContractDeployer__factory>;
    getContractFactory(
      name: "ConstructorForwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConstructorForwarder__factory>;
    getContractFactory(
      name: "EventOnFallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EventOnFallback__factory>;
    getContractFactory(
      name: "Forwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Forwarder__factory>;
    getContractFactory(
      name: "Multicall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall__factory>;
    getContractFactory(
      name: "Multicall3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall3__factory>;
    getContractFactory(
      name: "ReturnSomething",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReturnSomething__factory>;
    getContractFactory(
      name: "RevertFallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RevertFallback__factory>;
    getContractFactory(
      name: "RevertReceiveAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RevertReceiveAccount__factory>;
    getContractFactory(
      name: "RevertTransferERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RevertTransferERC20__factory>;
    getContractFactory(
      name: "SingletonFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SingletonFactory__factory>;
    getContractFactory(
      name: "AdminFacetTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdminFacetTest__factory>;
    getContractFactory(
      name: "CustomUpgradeTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CustomUpgradeTest__factory>;
    getContractFactory(
      name: "DiamondCutTestContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondCutTestContract__factory>;
    getContractFactory(
      name: "DiamondProxyTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondProxyTest__factory>;
    getContractFactory(
      name: "DummyERC20BytesTransferReturnValue",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyERC20BytesTransferReturnValue__factory>;
    getContractFactory(
      name: "DummyERC20NoTransferReturnValue",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyERC20NoTransferReturnValue__factory>;
    getContractFactory(
      name: "DummyExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyExecutor__factory>;
    getContractFactory(
      name: "ExecutorProvingTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExecutorProvingTest__factory>;
    getContractFactory(
      name: "L1ERC20BridgeTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1ERC20BridgeTest__factory>;
    getContractFactory(
      name: "MerkleTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleTest__factory>;
    getContractFactory(
      name: "MockExecutorFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockExecutorFacet__factory>;
    getContractFactory(
      name: "PriorityQueueTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriorityQueueTest__factory>;
    getContractFactory(
      name: "ReenterGovernance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReenterGovernance__factory>;
    getContractFactory(
      name: "TransactionValidatorTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransactionValidatorTest__factory>;
    getContractFactory(
      name: "UnsafeBytesTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UnsafeBytesTest__factory>;
    getContractFactory(
      name: "VerifierRecursiveTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifierRecursiveTest__factory>;
    getContractFactory(
      name: "VerifierTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifierTest__factory>;
    getContractFactory(
      name: "TestnetERC20Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestnetERC20Token__factory>;
    getContractFactory(
      name: "WETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9__factory>;
    getContractFactory(
      name: "Governance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Governance__factory>;
    getContractFactory(
      name: "IGovernance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernance__factory>;
    getContractFactory(
      name: "BaseZkSyncUpgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseZkSyncUpgrade__factory>;
    getContractFactory(
      name: "DefaultUpgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DefaultUpgrade__factory>;
    getContractFactory(
      name: "DiamondInit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondInit__factory>;
    getContractFactory(
      name: "DiamondProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondProxy__factory>;
    getContractFactory(
      name: "AdminFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdminFacet__factory>;
    getContractFactory(
      name: "ExecutorFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExecutorFacet__factory>;
    getContractFactory(
      name: "GettersFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GettersFacet__factory>;
    getContractFactory(
      name: "MailboxFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MailboxFacet__factory>;
    getContractFactory(
      name: "IAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAdmin__factory>;
    getContractFactory(
      name: "IBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBase__factory>;
    getContractFactory(
      name: "IExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExecutor__factory>;
    getContractFactory(
      name: "IGetters",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGetters__factory>;
    getContractFactory(
      name: "ILegacyGetters",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILegacyGetters__factory>;
    getContractFactory(
      name: "IMailbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMailbox__factory>;
    getContractFactory(
      name: "IVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVerifier__factory>;
    getContractFactory(
      name: "IZkSync",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZkSync__factory>;
    getContractFactory(
      name: "Diamond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Diamond__factory>;
    getContractFactory(
      name: "DiamondUpgradeInit1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondUpgradeInit1__factory>;
    getContractFactory(
      name: "DiamondUpgradeInit2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondUpgradeInit2__factory>;
    getContractFactory(
      name: "IOldContractDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOldContractDeployer__factory>;
    getContractFactory(
      name: "DiamondUpgradeInit3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondUpgradeInit3__factory>;
    getContractFactory(
      name: "IOldDiamondCut",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOldDiamondCut__factory>;
    getContractFactory(
      name: "DiamondUpgradeInit4",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondUpgradeInit4__factory>;
    getContractFactory(
      name: "IOldContractDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOldContractDeployer__factory>;
    getContractFactory(
      name: "DiamondUpgradeInit5",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondUpgradeInit5__factory>;
    getContractFactory(
      name: "DiamondUpgradeInit6",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondUpgradeInit6__factory>;
    getContractFactory(
      name: "ValidatorTimelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValidatorTimelock__factory>;
    getContractFactory(
      name: "Verifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Verifier__factory>;

    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Ownable2Step",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable2Step>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IBeacon",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "TransparentUpgradeableProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IL1Bridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IL1Bridge>;
    getContractAt(
      name: "IL1BridgeLegacy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IL1BridgeLegacy>;
    getContractAt(
      name: "IL2Bridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IL2Bridge>;
    getContractAt(
      name: "IL2ERC20Bridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IL2ERC20Bridge>;
    getContractAt(
      name: "IL2WethBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IL2WethBridge>;
    getContractAt(
      name: "IWETH9",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH9>;
    getContractAt(
      name: "L1ERC20Bridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.L1ERC20Bridge>;
    getContractAt(
      name: "L1WethBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.L1WethBridge>;
    getContractAt(
      name: "AllowList",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AllowList>;
    getContractAt(
      name: "IAllowList",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAllowList>;
    getContractAt(
      name: "IL2ContractDeployer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IL2ContractDeployer>;
    getContractAt(
      name: "ConstructorForwarder",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ConstructorForwarder>;
    getContractAt(
      name: "EventOnFallback",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EventOnFallback>;
    getContractAt(
      name: "Forwarder",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Forwarder>;
    getContractAt(
      name: "Multicall",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall>;
    getContractAt(
      name: "Multicall3",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall3>;
    getContractAt(
      name: "ReturnSomething",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReturnSomething>;
    getContractAt(
      name: "RevertFallback",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RevertFallback>;
    getContractAt(
      name: "RevertReceiveAccount",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RevertReceiveAccount>;
    getContractAt(
      name: "RevertTransferERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RevertTransferERC20>;
    getContractAt(
      name: "SingletonFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SingletonFactory>;
    getContractAt(
      name: "AdminFacetTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AdminFacetTest>;
    getContractAt(
      name: "CustomUpgradeTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CustomUpgradeTest>;
    getContractAt(
      name: "DiamondCutTestContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondCutTestContract>;
    getContractAt(
      name: "DiamondProxyTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondProxyTest>;
    getContractAt(
      name: "DummyERC20BytesTransferReturnValue",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyERC20BytesTransferReturnValue>;
    getContractAt(
      name: "DummyERC20NoTransferReturnValue",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyERC20NoTransferReturnValue>;
    getContractAt(
      name: "DummyExecutor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyExecutor>;
    getContractAt(
      name: "ExecutorProvingTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ExecutorProvingTest>;
    getContractAt(
      name: "L1ERC20BridgeTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.L1ERC20BridgeTest>;
    getContractAt(
      name: "MerkleTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleTest>;
    getContractAt(
      name: "MockExecutorFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockExecutorFacet>;
    getContractAt(
      name: "PriorityQueueTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PriorityQueueTest>;
    getContractAt(
      name: "ReenterGovernance",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReenterGovernance>;
    getContractAt(
      name: "TransactionValidatorTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TransactionValidatorTest>;
    getContractAt(
      name: "UnsafeBytesTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UnsafeBytesTest>;
    getContractAt(
      name: "VerifierRecursiveTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VerifierRecursiveTest>;
    getContractAt(
      name: "VerifierTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VerifierTest>;
    getContractAt(
      name: "TestnetERC20Token",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestnetERC20Token>;
    getContractAt(
      name: "WETH9",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9>;
    getContractAt(
      name: "Governance",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Governance>;
    getContractAt(
      name: "IGovernance",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernance>;
    getContractAt(
      name: "BaseZkSyncUpgrade",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseZkSyncUpgrade>;
    getContractAt(
      name: "DefaultUpgrade",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DefaultUpgrade>;
    getContractAt(
      name: "DiamondInit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondInit>;
    getContractAt(
      name: "DiamondProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondProxy>;
    getContractAt(
      name: "AdminFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AdminFacet>;
    getContractAt(
      name: "ExecutorFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ExecutorFacet>;
    getContractAt(
      name: "GettersFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GettersFacet>;
    getContractAt(
      name: "MailboxFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MailboxFacet>;
    getContractAt(
      name: "IAdmin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAdmin>;
    getContractAt(
      name: "IBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBase>;
    getContractAt(
      name: "IExecutor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IExecutor>;
    getContractAt(
      name: "IGetters",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGetters>;
    getContractAt(
      name: "ILegacyGetters",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILegacyGetters>;
    getContractAt(
      name: "IMailbox",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMailbox>;
    getContractAt(
      name: "IVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVerifier>;
    getContractAt(
      name: "IZkSync",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IZkSync>;
    getContractAt(
      name: "Diamond",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Diamond>;
    getContractAt(
      name: "DiamondUpgradeInit1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondUpgradeInit1>;
    getContractAt(
      name: "DiamondUpgradeInit2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondUpgradeInit2>;
    getContractAt(
      name: "IOldContractDeployer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOldContractDeployer>;
    getContractAt(
      name: "DiamondUpgradeInit3",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondUpgradeInit3>;
    getContractAt(
      name: "IOldDiamondCut",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOldDiamondCut>;
    getContractAt(
      name: "DiamondUpgradeInit4",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondUpgradeInit4>;
    getContractAt(
      name: "IOldContractDeployer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOldContractDeployer>;
    getContractAt(
      name: "DiamondUpgradeInit5",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondUpgradeInit5>;
    getContractAt(
      name: "DiamondUpgradeInit6",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondUpgradeInit6>;
    getContractAt(
      name: "ValidatorTimelock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ValidatorTimelock>;
    getContractAt(
      name: "Verifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Verifier>;

    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "Ownable2Step",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable2Step>;
    deployContract(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1822Proxiable>;
    deployContract(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeacon>;
    deployContract(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Proxy>;
    deployContract(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Upgrade>;
    deployContract(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Proxy>;
    deployContract(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IL1Bridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL1Bridge>;
    deployContract(
      name: "IL1BridgeLegacy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL1BridgeLegacy>;
    deployContract(
      name: "IL2Bridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL2Bridge>;
    deployContract(
      name: "IL2ERC20Bridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL2ERC20Bridge>;
    deployContract(
      name: "IL2WethBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL2WethBridge>;
    deployContract(
      name: "IWETH9",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH9>;
    deployContract(
      name: "L1ERC20Bridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.L1ERC20Bridge>;
    deployContract(
      name: "L1WethBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.L1WethBridge>;
    deployContract(
      name: "AllowList",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AllowList>;
    deployContract(
      name: "IAllowList",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAllowList>;
    deployContract(
      name: "IL2ContractDeployer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL2ContractDeployer>;
    deployContract(
      name: "ConstructorForwarder",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ConstructorForwarder>;
    deployContract(
      name: "EventOnFallback",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EventOnFallback>;
    deployContract(
      name: "Forwarder",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Forwarder>;
    deployContract(
      name: "Multicall",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Multicall>;
    deployContract(
      name: "Multicall3",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Multicall3>;
    deployContract(
      name: "ReturnSomething",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReturnSomething>;
    deployContract(
      name: "RevertFallback",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RevertFallback>;
    deployContract(
      name: "RevertReceiveAccount",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RevertReceiveAccount>;
    deployContract(
      name: "RevertTransferERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RevertTransferERC20>;
    deployContract(
      name: "SingletonFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SingletonFactory>;
    deployContract(
      name: "AdminFacetTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AdminFacetTest>;
    deployContract(
      name: "CustomUpgradeTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CustomUpgradeTest>;
    deployContract(
      name: "DiamondCutTestContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondCutTestContract>;
    deployContract(
      name: "DiamondProxyTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondProxyTest>;
    deployContract(
      name: "DummyERC20BytesTransferReturnValue",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DummyERC20BytesTransferReturnValue>;
    deployContract(
      name: "DummyERC20NoTransferReturnValue",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DummyERC20NoTransferReturnValue>;
    deployContract(
      name: "DummyExecutor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DummyExecutor>;
    deployContract(
      name: "ExecutorProvingTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExecutorProvingTest>;
    deployContract(
      name: "L1ERC20BridgeTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.L1ERC20BridgeTest>;
    deployContract(
      name: "MerkleTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MerkleTest>;
    deployContract(
      name: "MockExecutorFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockExecutorFacet>;
    deployContract(
      name: "PriorityQueueTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PriorityQueueTest>;
    deployContract(
      name: "ReenterGovernance",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReenterGovernance>;
    deployContract(
      name: "TransactionValidatorTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TransactionValidatorTest>;
    deployContract(
      name: "UnsafeBytesTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UnsafeBytesTest>;
    deployContract(
      name: "VerifierRecursiveTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VerifierRecursiveTest>;
    deployContract(
      name: "VerifierTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VerifierTest>;
    deployContract(
      name: "TestnetERC20Token",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestnetERC20Token>;
    deployContract(
      name: "WETH9",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WETH9>;
    deployContract(
      name: "Governance",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Governance>;
    deployContract(
      name: "IGovernance",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGovernance>;
    deployContract(
      name: "BaseZkSyncUpgrade",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseZkSyncUpgrade>;
    deployContract(
      name: "DefaultUpgrade",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DefaultUpgrade>;
    deployContract(
      name: "DiamondInit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondInit>;
    deployContract(
      name: "DiamondProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondProxy>;
    deployContract(
      name: "AdminFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AdminFacet>;
    deployContract(
      name: "ExecutorFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExecutorFacet>;
    deployContract(
      name: "GettersFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GettersFacet>;
    deployContract(
      name: "MailboxFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MailboxFacet>;
    deployContract(
      name: "IAdmin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAdmin>;
    deployContract(
      name: "IBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBase>;
    deployContract(
      name: "IExecutor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExecutor>;
    deployContract(
      name: "IGetters",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGetters>;
    deployContract(
      name: "ILegacyGetters",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILegacyGetters>;
    deployContract(
      name: "IMailbox",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMailbox>;
    deployContract(
      name: "IVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVerifier>;
    deployContract(
      name: "IZkSync",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IZkSync>;
    deployContract(
      name: "Diamond",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Diamond>;
    deployContract(
      name: "DiamondUpgradeInit1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondUpgradeInit1>;
    deployContract(
      name: "DiamondUpgradeInit2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondUpgradeInit2>;
    deployContract(
      name: "IOldContractDeployer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOldContractDeployer>;
    deployContract(
      name: "DiamondUpgradeInit3",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondUpgradeInit3>;
    deployContract(
      name: "IOldDiamondCut",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOldDiamondCut>;
    deployContract(
      name: "DiamondUpgradeInit4",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondUpgradeInit4>;
    deployContract(
      name: "IOldContractDeployer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOldContractDeployer>;
    deployContract(
      name: "DiamondUpgradeInit5",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondUpgradeInit5>;
    deployContract(
      name: "DiamondUpgradeInit6",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondUpgradeInit6>;
    deployContract(
      name: "ValidatorTimelock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ValidatorTimelock>;
    deployContract(
      name: "Verifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Verifier>;

    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "Ownable2Step",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable2Step>;
    deployContract(
      name: "IERC1822Proxiable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1822Proxiable>;
    deployContract(
      name: "IBeacon",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeacon>;
    deployContract(
      name: "ERC1967Proxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Proxy>;
    deployContract(
      name: "ERC1967Upgrade",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Upgrade>;
    deployContract(
      name: "Proxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Proxy>;
    deployContract(
      name: "TransparentUpgradeableProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IL1Bridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL1Bridge>;
    deployContract(
      name: "IL1BridgeLegacy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL1BridgeLegacy>;
    deployContract(
      name: "IL2Bridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL2Bridge>;
    deployContract(
      name: "IL2ERC20Bridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL2ERC20Bridge>;
    deployContract(
      name: "IL2WethBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL2WethBridge>;
    deployContract(
      name: "IWETH9",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH9>;
    deployContract(
      name: "L1ERC20Bridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.L1ERC20Bridge>;
    deployContract(
      name: "L1WethBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.L1WethBridge>;
    deployContract(
      name: "AllowList",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AllowList>;
    deployContract(
      name: "IAllowList",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAllowList>;
    deployContract(
      name: "IL2ContractDeployer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL2ContractDeployer>;
    deployContract(
      name: "ConstructorForwarder",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ConstructorForwarder>;
    deployContract(
      name: "EventOnFallback",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EventOnFallback>;
    deployContract(
      name: "Forwarder",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Forwarder>;
    deployContract(
      name: "Multicall",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Multicall>;
    deployContract(
      name: "Multicall3",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Multicall3>;
    deployContract(
      name: "ReturnSomething",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReturnSomething>;
    deployContract(
      name: "RevertFallback",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RevertFallback>;
    deployContract(
      name: "RevertReceiveAccount",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RevertReceiveAccount>;
    deployContract(
      name: "RevertTransferERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RevertTransferERC20>;
    deployContract(
      name: "SingletonFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SingletonFactory>;
    deployContract(
      name: "AdminFacetTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AdminFacetTest>;
    deployContract(
      name: "CustomUpgradeTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CustomUpgradeTest>;
    deployContract(
      name: "DiamondCutTestContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondCutTestContract>;
    deployContract(
      name: "DiamondProxyTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondProxyTest>;
    deployContract(
      name: "DummyERC20BytesTransferReturnValue",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DummyERC20BytesTransferReturnValue>;
    deployContract(
      name: "DummyERC20NoTransferReturnValue",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DummyERC20NoTransferReturnValue>;
    deployContract(
      name: "DummyExecutor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DummyExecutor>;
    deployContract(
      name: "ExecutorProvingTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExecutorProvingTest>;
    deployContract(
      name: "L1ERC20BridgeTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.L1ERC20BridgeTest>;
    deployContract(
      name: "MerkleTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MerkleTest>;
    deployContract(
      name: "MockExecutorFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockExecutorFacet>;
    deployContract(
      name: "PriorityQueueTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PriorityQueueTest>;
    deployContract(
      name: "ReenterGovernance",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReenterGovernance>;
    deployContract(
      name: "TransactionValidatorTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TransactionValidatorTest>;
    deployContract(
      name: "UnsafeBytesTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UnsafeBytesTest>;
    deployContract(
      name: "VerifierRecursiveTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VerifierRecursiveTest>;
    deployContract(
      name: "VerifierTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VerifierTest>;
    deployContract(
      name: "TestnetERC20Token",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestnetERC20Token>;
    deployContract(
      name: "WETH9",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WETH9>;
    deployContract(
      name: "Governance",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Governance>;
    deployContract(
      name: "IGovernance",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGovernance>;
    deployContract(
      name: "BaseZkSyncUpgrade",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseZkSyncUpgrade>;
    deployContract(
      name: "DefaultUpgrade",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DefaultUpgrade>;
    deployContract(
      name: "DiamondInit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondInit>;
    deployContract(
      name: "DiamondProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondProxy>;
    deployContract(
      name: "AdminFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AdminFacet>;
    deployContract(
      name: "ExecutorFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExecutorFacet>;
    deployContract(
      name: "GettersFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GettersFacet>;
    deployContract(
      name: "MailboxFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MailboxFacet>;
    deployContract(
      name: "IAdmin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAdmin>;
    deployContract(
      name: "IBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBase>;
    deployContract(
      name: "IExecutor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExecutor>;
    deployContract(
      name: "IGetters",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGetters>;
    deployContract(
      name: "ILegacyGetters",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILegacyGetters>;
    deployContract(
      name: "IMailbox",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMailbox>;
    deployContract(
      name: "IVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVerifier>;
    deployContract(
      name: "IZkSync",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IZkSync>;
    deployContract(
      name: "Diamond",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Diamond>;
    deployContract(
      name: "DiamondUpgradeInit1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondUpgradeInit1>;
    deployContract(
      name: "DiamondUpgradeInit2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondUpgradeInit2>;
    deployContract(
      name: "IOldContractDeployer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOldContractDeployer>;
    deployContract(
      name: "DiamondUpgradeInit3",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondUpgradeInit3>;
    deployContract(
      name: "IOldDiamondCut",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOldDiamondCut>;
    deployContract(
      name: "DiamondUpgradeInit4",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondUpgradeInit4>;
    deployContract(
      name: "IOldContractDeployer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOldContractDeployer>;
    deployContract(
      name: "DiamondUpgradeInit5",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondUpgradeInit5>;
    deployContract(
      name: "DiamondUpgradeInit6",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondUpgradeInit6>;
    deployContract(
      name: "ValidatorTimelock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ValidatorTimelock>;
    deployContract(
      name: "Verifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Verifier>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
