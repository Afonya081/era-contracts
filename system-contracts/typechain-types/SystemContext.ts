/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface SystemContextInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "appendTransactionToCurrentL2Block"
      | "baseFee"
      | "blockGasLimit"
      | "blockHash"
      | "chainId"
      | "coinbase"
      | "currentBlockInfo"
      | "difficulty"
      | "gasPrice"
      | "getBatchHash"
      | "getBatchNumberAndTimestamp"
      | "getBlockHashEVM"
      | "getBlockNumber"
      | "getBlockNumberAndTimestamp"
      | "getBlockTimestamp"
      | "getL2BlockNumberAndTimestamp"
      | "incrementTxNumberInBatch"
      | "origin"
      | "publishTimestampDataToL1"
      | "resetTxNumberInBatch"
      | "setGasPrice"
      | "setL2Block"
      | "setNewBatch"
      | "setTxOrigin"
      | "txNumberInBlock"
      | "unsafeOverrideBatch"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "appendTransactionToCurrentL2Block",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "baseFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "blockGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blockHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(functionFragment: "coinbase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentBlockInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "difficulty",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gasPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBatchHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchNumberAndTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockHashEVM",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockNumberAndTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2BlockNumberAndTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incrementTxNumberInBatch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "origin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publishTimestampDataToL1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetTxNumberInBatch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGasPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setL2Block",
    values: [BigNumberish, BigNumberish, BytesLike, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewBatch",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTxOrigin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "txNumberInBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unsafeOverrideBatch",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "appendTransactionToCurrentL2Block",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blockGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blockHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "coinbase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentBlockInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "difficulty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gasPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBatchHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchNumberAndTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockHashEVM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockNumberAndTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2BlockNumberAndTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementTxNumberInBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "origin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publishTimestampDataToL1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetTxNumberInBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setL2Block", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNewBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTxOrigin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "txNumberInBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsafeOverrideBatch",
    data: BytesLike
  ): Result;
}

export interface SystemContext extends BaseContract {
  connect(runner?: ContractRunner | null): SystemContext;
  waitForDeployment(): Promise<this>;

  interface: SystemContextInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  appendTransactionToCurrentL2Block: TypedContractMethod<
    [_txHash: BytesLike],
    [void],
    "nonpayable"
  >;

  baseFee: TypedContractMethod<[], [bigint], "view">;

  blockGasLimit: TypedContractMethod<[], [bigint], "view">;

  blockHash: TypedContractMethod<
    [_blockNumber: BigNumberish],
    [string],
    "view"
  >;

  chainId: TypedContractMethod<[], [bigint], "view">;

  coinbase: TypedContractMethod<[], [string], "view">;

  currentBlockInfo: TypedContractMethod<[], [bigint], "view">;

  difficulty: TypedContractMethod<[], [bigint], "view">;

  gasPrice: TypedContractMethod<[], [bigint], "view">;

  getBatchHash: TypedContractMethod<
    [_batchNumber: BigNumberish],
    [string],
    "view"
  >;

  getBatchNumberAndTimestamp: TypedContractMethod<
    [],
    [[bigint, bigint] & { batchNumber: bigint; batchTimestamp: bigint }],
    "view"
  >;

  getBlockHashEVM: TypedContractMethod<
    [_block: BigNumberish],
    [string],
    "view"
  >;

  getBlockNumber: TypedContractMethod<[], [bigint], "view">;

  getBlockNumberAndTimestamp: TypedContractMethod<
    [],
    [[bigint, bigint] & { blockNumber: bigint; blockTimestamp: bigint }],
    "view"
  >;

  getBlockTimestamp: TypedContractMethod<[], [bigint], "view">;

  getL2BlockNumberAndTimestamp: TypedContractMethod<
    [],
    [[bigint, bigint] & { blockNumber: bigint; blockTimestamp: bigint }],
    "view"
  >;

  incrementTxNumberInBatch: TypedContractMethod<[], [void], "nonpayable">;

  origin: TypedContractMethod<[], [string], "view">;

  publishTimestampDataToL1: TypedContractMethod<[], [void], "nonpayable">;

  resetTxNumberInBatch: TypedContractMethod<[], [void], "nonpayable">;

  setGasPrice: TypedContractMethod<
    [_gasPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  setL2Block: TypedContractMethod<
    [
      _l2BlockNumber: BigNumberish,
      _l2BlockTimestamp: BigNumberish,
      _expectedPrevL2BlockHash: BytesLike,
      _isFirstInBatch: boolean,
      _maxVirtualBlocksToCreate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setNewBatch: TypedContractMethod<
    [
      _prevBatchHash: BytesLike,
      _newTimestamp: BigNumberish,
      _expectedNewNumber: BigNumberish,
      _baseFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setTxOrigin: TypedContractMethod<
    [_newOrigin: AddressLike],
    [void],
    "nonpayable"
  >;

  txNumberInBlock: TypedContractMethod<[], [bigint], "view">;

  unsafeOverrideBatch: TypedContractMethod<
    [
      _newTimestamp: BigNumberish,
      _number: BigNumberish,
      _baseFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "appendTransactionToCurrentL2Block"
  ): TypedContractMethod<[_txHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "baseFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "blockGasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "blockHash"
  ): TypedContractMethod<[_blockNumber: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "chainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "coinbase"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "currentBlockInfo"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "difficulty"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gasPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBatchHash"
  ): TypedContractMethod<[_batchNumber: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getBatchNumberAndTimestamp"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { batchNumber: bigint; batchTimestamp: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBlockHashEVM"
  ): TypedContractMethod<[_block: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getBlockNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBlockNumberAndTimestamp"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { blockNumber: bigint; blockTimestamp: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBlockTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getL2BlockNumberAndTimestamp"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { blockNumber: bigint; blockTimestamp: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "incrementTxNumberInBatch"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "origin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "publishTimestampDataToL1"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resetTxNumberInBatch"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGasPrice"
  ): TypedContractMethod<[_gasPrice: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setL2Block"
  ): TypedContractMethod<
    [
      _l2BlockNumber: BigNumberish,
      _l2BlockTimestamp: BigNumberish,
      _expectedPrevL2BlockHash: BytesLike,
      _isFirstInBatch: boolean,
      _maxVirtualBlocksToCreate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setNewBatch"
  ): TypedContractMethod<
    [
      _prevBatchHash: BytesLike,
      _newTimestamp: BigNumberish,
      _expectedNewNumber: BigNumberish,
      _baseFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTxOrigin"
  ): TypedContractMethod<[_newOrigin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "txNumberInBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unsafeOverrideBatch"
  ): TypedContractMethod<
    [
      _newTimestamp: BigNumberish,
      _number: BigNumberish,
      _baseFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
