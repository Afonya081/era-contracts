/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ICompressor,
  ICompressorInterface,
} from "../../interfaces/ICompressor";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_bytecode",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_rawCompressedData",
        type: "bytes",
      },
    ],
    name: "publishCompressedBytecode",
    outputs: [
      {
        internalType: "bytes32",
        name: "bytecodeHash",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_numberOfStateDiffs",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_enumerationIndexSize",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_stateDiffs",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_compressedStateDiffs",
        type: "bytes",
      },
    ],
    name: "verifyCompressedStateDiffs",
    outputs: [
      {
        internalType: "bytes32",
        name: "stateDiffHash",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class ICompressor__factory {
  static readonly abi = _abi;
  static createInterface(): ICompressorInterface {
    return new Interface(_abi) as ICompressorInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ICompressor {
    return new Contract(address, _abi, runner) as unknown as ICompressor;
  }
}
