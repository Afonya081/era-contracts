/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  DummyUpgrade,
  DummyUpgradeInterface,
} from "../../test-contracts/DummyUpgrade";

const _abi = [
  {
    anonymous: false,
    inputs: [],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [],
    name: "performUpgrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x000100000000000200000000030100190000006003300270000000110030019d000000110330019700000001022001900000002c0000c13d000000040230008c000000360000413d000000000101043b0000001301100197000000140110009c000000360000c13d0000000001000416000000000101004b000000360000c13d000000040100008a00000000011000310000001502000041000000000301004b000000000300001900000000030240190000001501100197000000000401004b000000000200a019000000150110009c00000000010300190000000001026019000000000101004b000000360000c13d00000011010000410000000002000414000000110320009c0000000001024019000000c00110021000000016011001c70000800d0200003900000001030000390000001704000041003d00380000040f0000000101200190000000360000613d00000000010000190000003e0001042e0000008001000039000000400010043f0000000001000416000000000101004b000000360000c13d00000020010000390000010000100443000001200000044300000012010000410000003e0001042e00000000010000190000003f000104300000003b002104210000000102000039000000000001042d0000000002000019000000000001042d0000003d000004320000003e0001042e0000003f00010430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff0000000200000000000000000000000000000040000001000000000000000000ffffffff00000000000000000000000000000000000000000000000000000000d00d472e000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000093fbc1e4e6dd1b841e906fc39754b42016b8d03dd4f71c6ed4bf00e4a062b11b06159dfea0f4cd66f224ee3cda061f4ece5a79c04cbf4c25e4a87aa288edf42a";

type DummyUpgradeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DummyUpgradeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DummyUpgrade__factory extends ContractFactory {
  constructor(...args: DummyUpgradeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DummyUpgrade & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DummyUpgrade__factory {
    return super.connect(runner) as DummyUpgrade__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DummyUpgradeInterface {
    return new Interface(_abi) as DummyUpgradeInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): DummyUpgrade {
    return new Contract(address, _abi, runner) as unknown as DummyUpgrade;
  }
}
