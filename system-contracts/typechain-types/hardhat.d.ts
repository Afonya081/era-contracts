/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccountCodeStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccountCodeStorage__factory>;
    getContractFactory(
      name: "BootloaderUtilities",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BootloaderUtilities__factory>;
    getContractFactory(
      name: "ComplexUpgrader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComplexUpgrader__factory>;
    getContractFactory(
      name: "Compressor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Compressor__factory>;
    getContractFactory(
      name: "ContractDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContractDeployer__factory>;
    getContractFactory(
      name: "DefaultAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DefaultAccount__factory>;
    getContractFactory(
      name: "EmptyContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmptyContract__factory>;
    getContractFactory(
      name: "ImmutableSimulator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImmutableSimulator__factory>;
    getContractFactory(
      name: "IAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccount__factory>;
    getContractFactory(
      name: "IAccountCodeStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccountCodeStorage__factory>;
    getContractFactory(
      name: "IBootloaderUtilities",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBootloaderUtilities__factory>;
    getContractFactory(
      name: "IComplexUpgrader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IComplexUpgrader__factory>;
    getContractFactory(
      name: "ICompressor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICompressor__factory>;
    getContractFactory(
      name: "IContractDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IContractDeployer__factory>;
    getContractFactory(
      name: "IEthToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEthToken__factory>;
    getContractFactory(
      name: "IImmutableSimulator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IImmutableSimulator__factory>;
    getContractFactory(
      name: "IKnownCodesStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKnownCodesStorage__factory>;
    getContractFactory(
      name: "IL1Messenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1Messenger__factory>;
    getContractFactory(
      name: "IL2StandardToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2StandardToken__factory>;
    getContractFactory(
      name: "IMailbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMailbox__factory>;
    getContractFactory(
      name: "INonceHolder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INonceHolder__factory>;
    getContractFactory(
      name: "IPaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPaymaster__factory>;
    getContractFactory(
      name: "IPaymasterFlow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPaymasterFlow__factory>;
    getContractFactory(
      name: "ISystemContext",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISystemContext__factory>;
    getContractFactory(
      name: "ISystemContextDeprecated",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISystemContextDeprecated__factory>;
    getContractFactory(
      name: "KnownCodesStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KnownCodesStorage__factory>;
    getContractFactory(
      name: "L1Messenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1Messenger__factory>;
    getContractFactory(
      name: "L2EthToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2EthToken__factory>;
    getContractFactory(
      name: "MsgValueSimulator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MsgValueSimulator__factory>;
    getContractFactory(
      name: "NonceHolder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NonceHolder__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SystemContext",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SystemContext__factory>;
    getContractFactory(
      name: "Callable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Callable__factory>;
    getContractFactory(
      name: "DelegateCaller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelegateCaller__factory>;
    getContractFactory(
      name: "Deployable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Deployable__factory>;
    getContractFactory(
      name: "DummyUpgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyUpgrade__factory>;
    getContractFactory(
      name: "EventWriterTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EventWriterTest__factory>;
    getContractFactory(
      name: "MockERC20Approve",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20Approve__factory>;
    getContractFactory(
      name: "MockKnownCodesStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockKnownCodesStorage__factory>;
    getContractFactory(
      name: "MockL1Messenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockL1Messenger__factory>;
    getContractFactory(
      name: "NotSystemCaller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NotSystemCaller__factory>;
    getContractFactory(
      name: "SystemCaller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SystemCaller__factory>;
    getContractFactory(
      name: "TestSystemContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestSystemContract__factory>;

    getContractAt(
      name: "AccountCodeStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccountCodeStorage>;
    getContractAt(
      name: "BootloaderUtilities",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BootloaderUtilities>;
    getContractAt(
      name: "ComplexUpgrader",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ComplexUpgrader>;
    getContractAt(
      name: "Compressor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Compressor>;
    getContractAt(
      name: "ContractDeployer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ContractDeployer>;
    getContractAt(
      name: "DefaultAccount",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DefaultAccount>;
    getContractAt(
      name: "EmptyContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmptyContract>;
    getContractAt(
      name: "ImmutableSimulator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ImmutableSimulator>;
    getContractAt(
      name: "IAccount",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccount>;
    getContractAt(
      name: "IAccountCodeStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccountCodeStorage>;
    getContractAt(
      name: "IBootloaderUtilities",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBootloaderUtilities>;
    getContractAt(
      name: "IComplexUpgrader",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IComplexUpgrader>;
    getContractAt(
      name: "ICompressor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICompressor>;
    getContractAt(
      name: "IContractDeployer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IContractDeployer>;
    getContractAt(
      name: "IEthToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEthToken>;
    getContractAt(
      name: "IImmutableSimulator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IImmutableSimulator>;
    getContractAt(
      name: "IKnownCodesStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IKnownCodesStorage>;
    getContractAt(
      name: "IL1Messenger",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IL1Messenger>;
    getContractAt(
      name: "IL2StandardToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IL2StandardToken>;
    getContractAt(
      name: "IMailbox",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMailbox>;
    getContractAt(
      name: "INonceHolder",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.INonceHolder>;
    getContractAt(
      name: "IPaymaster",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPaymaster>;
    getContractAt(
      name: "IPaymasterFlow",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPaymasterFlow>;
    getContractAt(
      name: "ISystemContext",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISystemContext>;
    getContractAt(
      name: "ISystemContextDeprecated",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISystemContextDeprecated>;
    getContractAt(
      name: "KnownCodesStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.KnownCodesStorage>;
    getContractAt(
      name: "L1Messenger",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.L1Messenger>;
    getContractAt(
      name: "L2EthToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.L2EthToken>;
    getContractAt(
      name: "MsgValueSimulator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MsgValueSimulator>;
    getContractAt(
      name: "NonceHolder",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.NonceHolder>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SystemContext",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SystemContext>;
    getContractAt(
      name: "Callable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Callable>;
    getContractAt(
      name: "DelegateCaller",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DelegateCaller>;
    getContractAt(
      name: "Deployable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Deployable>;
    getContractAt(
      name: "DummyUpgrade",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyUpgrade>;
    getContractAt(
      name: "EventWriterTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EventWriterTest>;
    getContractAt(
      name: "MockERC20Approve",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20Approve>;
    getContractAt(
      name: "MockKnownCodesStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockKnownCodesStorage>;
    getContractAt(
      name: "MockL1Messenger",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockL1Messenger>;
    getContractAt(
      name: "NotSystemCaller",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.NotSystemCaller>;
    getContractAt(
      name: "SystemCaller",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SystemCaller>;
    getContractAt(
      name: "TestSystemContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestSystemContract>;

    deployContract(
      name: "AccountCodeStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccountCodeStorage>;
    deployContract(
      name: "BootloaderUtilities",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BootloaderUtilities>;
    deployContract(
      name: "ComplexUpgrader",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplexUpgrader>;
    deployContract(
      name: "Compressor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Compressor>;
    deployContract(
      name: "ContractDeployer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContractDeployer>;
    deployContract(
      name: "DefaultAccount",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DefaultAccount>;
    deployContract(
      name: "EmptyContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmptyContract>;
    deployContract(
      name: "ImmutableSimulator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ImmutableSimulator>;
    deployContract(
      name: "IAccount",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccount>;
    deployContract(
      name: "IAccountCodeStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccountCodeStorage>;
    deployContract(
      name: "IBootloaderUtilities",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBootloaderUtilities>;
    deployContract(
      name: "IComplexUpgrader",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IComplexUpgrader>;
    deployContract(
      name: "ICompressor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICompressor>;
    deployContract(
      name: "IContractDeployer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IContractDeployer>;
    deployContract(
      name: "IEthToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEthToken>;
    deployContract(
      name: "IImmutableSimulator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IImmutableSimulator>;
    deployContract(
      name: "IKnownCodesStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IKnownCodesStorage>;
    deployContract(
      name: "IL1Messenger",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL1Messenger>;
    deployContract(
      name: "IL2StandardToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL2StandardToken>;
    deployContract(
      name: "IMailbox",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMailbox>;
    deployContract(
      name: "INonceHolder",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.INonceHolder>;
    deployContract(
      name: "IPaymaster",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPaymaster>;
    deployContract(
      name: "IPaymasterFlow",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPaymasterFlow>;
    deployContract(
      name: "ISystemContext",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISystemContext>;
    deployContract(
      name: "ISystemContextDeprecated",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISystemContextDeprecated>;
    deployContract(
      name: "KnownCodesStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KnownCodesStorage>;
    deployContract(
      name: "L1Messenger",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.L1Messenger>;
    deployContract(
      name: "L2EthToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.L2EthToken>;
    deployContract(
      name: "MsgValueSimulator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MsgValueSimulator>;
    deployContract(
      name: "NonceHolder",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NonceHolder>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SystemContext",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SystemContext>;
    deployContract(
      name: "Callable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Callable>;
    deployContract(
      name: "DelegateCaller",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DelegateCaller>;
    deployContract(
      name: "Deployable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Deployable>;
    deployContract(
      name: "DummyUpgrade",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DummyUpgrade>;
    deployContract(
      name: "EventWriterTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EventWriterTest>;
    deployContract(
      name: "MockERC20Approve",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockERC20Approve>;
    deployContract(
      name: "MockKnownCodesStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockKnownCodesStorage>;
    deployContract(
      name: "MockL1Messenger",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockL1Messenger>;
    deployContract(
      name: "NotSystemCaller",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NotSystemCaller>;
    deployContract(
      name: "SystemCaller",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SystemCaller>;
    deployContract(
      name: "TestSystemContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestSystemContract>;

    deployContract(
      name: "AccountCodeStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccountCodeStorage>;
    deployContract(
      name: "BootloaderUtilities",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BootloaderUtilities>;
    deployContract(
      name: "ComplexUpgrader",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplexUpgrader>;
    deployContract(
      name: "Compressor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Compressor>;
    deployContract(
      name: "ContractDeployer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContractDeployer>;
    deployContract(
      name: "DefaultAccount",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DefaultAccount>;
    deployContract(
      name: "EmptyContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmptyContract>;
    deployContract(
      name: "ImmutableSimulator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ImmutableSimulator>;
    deployContract(
      name: "IAccount",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccount>;
    deployContract(
      name: "IAccountCodeStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccountCodeStorage>;
    deployContract(
      name: "IBootloaderUtilities",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBootloaderUtilities>;
    deployContract(
      name: "IComplexUpgrader",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IComplexUpgrader>;
    deployContract(
      name: "ICompressor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICompressor>;
    deployContract(
      name: "IContractDeployer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IContractDeployer>;
    deployContract(
      name: "IEthToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEthToken>;
    deployContract(
      name: "IImmutableSimulator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IImmutableSimulator>;
    deployContract(
      name: "IKnownCodesStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IKnownCodesStorage>;
    deployContract(
      name: "IL1Messenger",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL1Messenger>;
    deployContract(
      name: "IL2StandardToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL2StandardToken>;
    deployContract(
      name: "IMailbox",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMailbox>;
    deployContract(
      name: "INonceHolder",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.INonceHolder>;
    deployContract(
      name: "IPaymaster",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPaymaster>;
    deployContract(
      name: "IPaymasterFlow",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPaymasterFlow>;
    deployContract(
      name: "ISystemContext",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISystemContext>;
    deployContract(
      name: "ISystemContextDeprecated",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISystemContextDeprecated>;
    deployContract(
      name: "KnownCodesStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KnownCodesStorage>;
    deployContract(
      name: "L1Messenger",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.L1Messenger>;
    deployContract(
      name: "L2EthToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.L2EthToken>;
    deployContract(
      name: "MsgValueSimulator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MsgValueSimulator>;
    deployContract(
      name: "NonceHolder",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NonceHolder>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SystemContext",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SystemContext>;
    deployContract(
      name: "Callable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Callable>;
    deployContract(
      name: "DelegateCaller",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DelegateCaller>;
    deployContract(
      name: "Deployable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Deployable>;
    deployContract(
      name: "DummyUpgrade",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DummyUpgrade>;
    deployContract(
      name: "EventWriterTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EventWriterTest>;
    deployContract(
      name: "MockERC20Approve",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockERC20Approve>;
    deployContract(
      name: "MockKnownCodesStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockKnownCodesStorage>;
    deployContract(
      name: "MockL1Messenger",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockL1Messenger>;
    deployContract(
      name: "NotSystemCaller",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NotSystemCaller>;
    deployContract(
      name: "SystemCaller",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SystemCaller>;
    deployContract(
      name: "TestSystemContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestSystemContract>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
