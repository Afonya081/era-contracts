/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface EventWriterTestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "fourTopics"
      | "oneTopic"
      | "threeTopics"
      | "twoTopics"
      | "zeroTopics"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FourTopics"
      | "OneTopic"
      | "ThreeTopics"
      | "TwoTopics"
      | "ZeroTopics"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "fourTopics",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "oneTopic", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "threeTopics",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "twoTopics",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "zeroTopics",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "fourTopics", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oneTopic", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "threeTopics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "twoTopics", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zeroTopics", data: BytesLike): Result;
}

export namespace FourTopicsEvent {
  export type InputTuple = [
    topic1: BigNumberish,
    topic2: BigNumberish,
    topic3: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    topic1: bigint,
    topic2: bigint,
    topic3: bigint,
    data: string
  ];
  export interface OutputObject {
    topic1: bigint;
    topic2: bigint;
    topic3: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OneTopicEvent {
  export type InputTuple = [data: BytesLike];
  export type OutputTuple = [data: string];
  export interface OutputObject {
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ThreeTopicsEvent {
  export type InputTuple = [
    topic1: BigNumberish,
    topic2: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [topic1: bigint, topic2: bigint, data: string];
  export interface OutputObject {
    topic1: bigint;
    topic2: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TwoTopicsEvent {
  export type InputTuple = [topic1: BigNumberish, data: BytesLike];
  export type OutputTuple = [topic1: bigint, data: string];
  export interface OutputObject {
    topic1: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ZeroTopicsEvent {
  export type InputTuple = [data: BytesLike];
  export type OutputTuple = [data: string];
  export interface OutputObject {
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EventWriterTest extends BaseContract {
  connect(runner?: ContractRunner | null): EventWriterTest;
  waitForDeployment(): Promise<this>;

  interface: EventWriterTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  fourTopics: TypedContractMethod<
    [
      topic1: BigNumberish,
      topic2: BigNumberish,
      topic3: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  oneTopic: TypedContractMethod<[data: BytesLike], [void], "nonpayable">;

  threeTopics: TypedContractMethod<
    [topic1: BigNumberish, topic2: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  twoTopics: TypedContractMethod<
    [topic1: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  zeroTopics: TypedContractMethod<[data: BytesLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "fourTopics"
  ): TypedContractMethod<
    [
      topic1: BigNumberish,
      topic2: BigNumberish,
      topic3: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "oneTopic"
  ): TypedContractMethod<[data: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "threeTopics"
  ): TypedContractMethod<
    [topic1: BigNumberish, topic2: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "twoTopics"
  ): TypedContractMethod<
    [topic1: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "zeroTopics"
  ): TypedContractMethod<[data: BytesLike], [void], "nonpayable">;

  getEvent(
    key: "FourTopics"
  ): TypedContractEvent<
    FourTopicsEvent.InputTuple,
    FourTopicsEvent.OutputTuple,
    FourTopicsEvent.OutputObject
  >;
  getEvent(
    key: "OneTopic"
  ): TypedContractEvent<
    OneTopicEvent.InputTuple,
    OneTopicEvent.OutputTuple,
    OneTopicEvent.OutputObject
  >;
  getEvent(
    key: "ThreeTopics"
  ): TypedContractEvent<
    ThreeTopicsEvent.InputTuple,
    ThreeTopicsEvent.OutputTuple,
    ThreeTopicsEvent.OutputObject
  >;
  getEvent(
    key: "TwoTopics"
  ): TypedContractEvent<
    TwoTopicsEvent.InputTuple,
    TwoTopicsEvent.OutputTuple,
    TwoTopicsEvent.OutputObject
  >;
  getEvent(
    key: "ZeroTopics"
  ): TypedContractEvent<
    ZeroTopicsEvent.InputTuple,
    ZeroTopicsEvent.OutputTuple,
    ZeroTopicsEvent.OutputObject
  >;

  filters: {
    "FourTopics(uint256,uint256,uint256,bytes)": TypedContractEvent<
      FourTopicsEvent.InputTuple,
      FourTopicsEvent.OutputTuple,
      FourTopicsEvent.OutputObject
    >;
    FourTopics: TypedContractEvent<
      FourTopicsEvent.InputTuple,
      FourTopicsEvent.OutputTuple,
      FourTopicsEvent.OutputObject
    >;

    "OneTopic(bytes)": TypedContractEvent<
      OneTopicEvent.InputTuple,
      OneTopicEvent.OutputTuple,
      OneTopicEvent.OutputObject
    >;
    OneTopic: TypedContractEvent<
      OneTopicEvent.InputTuple,
      OneTopicEvent.OutputTuple,
      OneTopicEvent.OutputObject
    >;

    "ThreeTopics(uint256,uint256,bytes)": TypedContractEvent<
      ThreeTopicsEvent.InputTuple,
      ThreeTopicsEvent.OutputTuple,
      ThreeTopicsEvent.OutputObject
    >;
    ThreeTopics: TypedContractEvent<
      ThreeTopicsEvent.InputTuple,
      ThreeTopicsEvent.OutputTuple,
      ThreeTopicsEvent.OutputObject
    >;

    "TwoTopics(uint256,bytes)": TypedContractEvent<
      TwoTopicsEvent.InputTuple,
      TwoTopicsEvent.OutputTuple,
      TwoTopicsEvent.OutputObject
    >;
    TwoTopics: TypedContractEvent<
      TwoTopicsEvent.InputTuple,
      TwoTopicsEvent.OutputTuple,
      TwoTopicsEvent.OutputObject
    >;

    "ZeroTopics(bytes)": TypedContractEvent<
      ZeroTopicsEvent.InputTuple,
      ZeroTopicsEvent.OutputTuple,
      ZeroTopicsEvent.OutputObject
    >;
    ZeroTopics: TypedContractEvent<
      ZeroTopicsEvent.InputTuple,
      ZeroTopicsEvent.OutputTuple,
      ZeroTopicsEvent.OutputObject
    >;
  };
}
