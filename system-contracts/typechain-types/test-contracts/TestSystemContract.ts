/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TestSystemContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "extraAbiData1"
      | "extraAbiData2"
      | "latestMsgSender"
      | "latestMsgValue"
      | "performMimicCall"
      | "performRawMimicCall"
      | "performSystemMimicCall"
      | "requireOnlySystem"
      | "saveContext"
      | "testMimicCallAndValue"
      | "testOnlySystemModifier"
      | "testPrecompileCall"
      | "testSystemMimicCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "extraAbiData1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extraAbiData2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestMsgSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestMsgValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performMimicCall",
    values: [AddressLike, AddressLike, BytesLike, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "performRawMimicCall",
    values: [AddressLike, AddressLike, BytesLike, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "performSystemMimicCall",
    values: [
      AddressLike,
      AddressLike,
      BytesLike,
      boolean,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requireOnlySystem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saveContext",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testMimicCallAndValue",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testOnlySystemModifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testPrecompileCall",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSystemMimicCall",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "extraAbiData1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraAbiData2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestMsgSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestMsgValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performMimicCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performRawMimicCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performSystemMimicCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireOnlySystem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saveContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testMimicCallAndValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testOnlySystemModifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testPrecompileCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSystemMimicCall",
    data: BytesLike
  ): Result;
}

export interface TestSystemContract extends BaseContract {
  connect(runner?: ContractRunner | null): TestSystemContract;
  waitForDeployment(): Promise<this>;

  interface: TestSystemContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  extraAbiData1: TypedContractMethod<[], [bigint], "view">;

  extraAbiData2: TypedContractMethod<[], [bigint], "view">;

  latestMsgSender: TypedContractMethod<[], [string], "view">;

  latestMsgValue: TypedContractMethod<[], [bigint], "view">;

  performMimicCall: TypedContractMethod<
    [
      to: AddressLike,
      whoToMimic: AddressLike,
      data: BytesLike,
      isConstructor: boolean,
      isSystem: boolean
    ],
    [string],
    "nonpayable"
  >;

  performRawMimicCall: TypedContractMethod<
    [
      to: AddressLike,
      whoToMimic: AddressLike,
      data: BytesLike,
      isConstructor: boolean,
      isSystem: boolean
    ],
    [boolean],
    "nonpayable"
  >;

  performSystemMimicCall: TypedContractMethod<
    [
      to: AddressLike,
      whoToMimic: AddressLike,
      data: BytesLike,
      isConstructor: boolean,
      extraAbiParam1: BigNumberish,
      extraAbiParam2: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  requireOnlySystem: TypedContractMethod<[], [void], "nonpayable">;

  saveContext: TypedContractMethod<[], [void], "payable">;

  testMimicCallAndValue: TypedContractMethod<
    [whoToMimic: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  testOnlySystemModifier: TypedContractMethod<[], [void], "nonpayable">;

  testPrecompileCall: TypedContractMethod<[], [void], "view">;

  testSystemMimicCall: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "extraAbiData1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "extraAbiData2"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "latestMsgSender"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "latestMsgValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "performMimicCall"
  ): TypedContractMethod<
    [
      to: AddressLike,
      whoToMimic: AddressLike,
      data: BytesLike,
      isConstructor: boolean,
      isSystem: boolean
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "performRawMimicCall"
  ): TypedContractMethod<
    [
      to: AddressLike,
      whoToMimic: AddressLike,
      data: BytesLike,
      isConstructor: boolean,
      isSystem: boolean
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "performSystemMimicCall"
  ): TypedContractMethod<
    [
      to: AddressLike,
      whoToMimic: AddressLike,
      data: BytesLike,
      isConstructor: boolean,
      extraAbiParam1: BigNumberish,
      extraAbiParam2: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requireOnlySystem"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "saveContext"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "testMimicCallAndValue"
  ): TypedContractMethod<
    [whoToMimic: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testOnlySystemModifier"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testPrecompileCall"
  ): TypedContractMethod<[], [void], "view">;
  getFunction(
    nameOrSignature: "testSystemMimicCall"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
